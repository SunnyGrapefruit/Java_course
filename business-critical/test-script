import org.junit.Assert;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

public class RegistrationPage {

    private static String URL_MATCH = "registration";

    private WebDriver driver;


    @FindBy(id = "adressFrom")
    private WebElement adressFrom;

    @FindBy(id = "adressTo")
    private WebElement adressTo;

    @FindBy(id = "phoneNumber")
    private WebElement phoneNumber;

    @FindBy(id = "callTaxi")
    private WebElement callTaxi;

    @FindBy(id = "error-message-adress")
    private WebElement adressError;

    @FindBy(id = "error-message-phone")
    private WebElement phoneError;


    public RegistrationPage(WebDriver driver) {
        // проверить, что вы находитесь на верной странице
        if (!driver.getCurrentUrl().contains(URL_MATCH)) {
            throw new IllegalStateException(
                    "This is not the page you are expected"
            );
        }
        PageFactory.initElements(driver, this);
        this.driver = driver;
    }

    /**
     * Ввод адреса
     * @param adress - {@link Adress}
     */
    private void inputAdress(Adress adress) {
        System.out.println(driver.getTitle());
        adressFrom.sendKeys(adress.adressFrom);
        adressTo.sendKeys(adress.adressTo);
        phoneNumber.sendKeys(adress.phoneNumber);

        callTaxi.click();
    }

    /**
     * Успешный ввод адреса
     * @param adress - {@link Adress}
     * @return {@link ConfirmForm}
     */
    public ConfirmForm callTaxiSuccess(Adress adress) {
        inputAdress(adress);
        return new ConfirmForm(driver);
    }

    /**
     * Неуспешный ввод адреса
     * @param adress - {@link Adress}
     * @return {@link AdressForm}
     */
    public AdressForm callTaxiError(Adress adress) {
        inputAdress(adress);
        return new AdressForm(driver);
    }

    /**
     * Проверить сообщение об ошибке
     * @param user - {@link User}
     * @return {@link RegistrationPage}
     */
    public RegistrationPage checkErrorMessage(String errorMessage) {
        Assert.assertTrue("Error message should be present",
                registerError.isDisplayed());
        Assert.assertTrue("Error message should contains " + errorMessage,
                registerError.getText().contains(errorMessage));
        return this;
    }
}




    @Test
    public void registerUserTest() {
        driver.get("http://HOST_NAME/registration");
        User user = User.createValidUser();
        user.email = "not_valid_email";

        RegistrationPage registrationPage =  new RegistrationPage(driver);
        registrationPage
                .registerUserError(user)
                .checkErrorMessage(errorMessage)
        ;

        user = User.createValidUser();

        registrationPage
                .registerUserSuccess(user)
        // ...
        // вызов методов HomePage
        ;
    }